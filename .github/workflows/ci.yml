name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

# Cancel in-progress runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12", "3.13"]
        
    steps:
    - uses: actions/checkout@v5
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
        
    - name: Install dependencies
      run: |
        uv sync --frozen
        uv pip install -e .[dev]
        
    # Run all quality checks - continue on error to see all failures
    - name: Check code formatting with black
      id: black
      continue-on-error: true
      run: |
        echo "::group::Black Formatting Check"
        uv run black --check src/ --diff --color
        echo "::endgroup::"
      
    - name: Lint with ruff
      id: ruff
      continue-on-error: true
      run: |
        echo "::group::Ruff Linting"
        uv run ruff check src/ --output-format=github
        echo "::endgroup::"
      
    - name: Type check with mypy
      id: mypy
      continue-on-error: true
      run: |
        echo "::group::MyPy Type Checking"
        uv run mypy . --pretty --color-output
        echo "::endgroup::"
      
    # Run tests with coverage - continue on error to get results
    - name: Run tests with coverage
      id: pytest
      continue-on-error: true
      timeout-minutes: 10  # Prevent hanging tests
      run: |
        echo "::group::PyTest with Coverage"
        uv run pytest \
          --cov=src/osdu_mcp_server \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          -v \
          --tb=short  # More concise error output for CI
        echo "::endgroup::"
        
    # Save test artifacts on failure
    - name: Upload test artifacts
      uses: actions/upload-artifact@v5
      if: failure() && steps.pytest.outcome == 'failure'
      with:
        name: test-artifacts-py${{ matrix.python-version }}
        path: |
          coverage.xml
          .coverage
          **/*.log
        retention-days: 7
        
    # Generate quality check summary
    - name: Quality Check Summary
      if: always()
      run: |
        echo "## Quality Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check each step's outcome
        if [[ "${{ steps.black.outcome }}" == "failure" ]]; then
          echo "❌ **Black formatting check failed**" >> $GITHUB_STEP_SUMMARY
          echo "   Run \`black src/\` locally to fix formatting issues" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ Black formatting check passed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.ruff.outcome }}" == "failure" ]]; then
          echo "❌ **Ruff linting failed**" >> $GITHUB_STEP_SUMMARY
          echo "   Check the logs above for specific linting errors" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ Ruff linting passed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.mypy.outcome }}" == "failure" ]]; then
          echo "❌ **MyPy type checking failed**" >> $GITHUB_STEP_SUMMARY
          echo "   Fix type errors shown in the logs above" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ MyPy type checking passed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.pytest.outcome }}" == "failure" ]]; then
          echo "❌ **PyTest failed**" >> $GITHUB_STEP_SUMMARY
          echo "   Tests failed or coverage is below 70%" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ PyTest passed with sufficient coverage" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [[ "${{ steps.black.outcome }}" == "failure" ]] || \
           [[ "${{ steps.ruff.outcome }}" == "failure" ]] || \
           [[ "${{ steps.mypy.outcome }}" == "failure" ]] || \
           [[ "${{ steps.pytest.outcome }}" == "failure" ]]; then
          echo "### ⚠️ Quality checks failed - see details above" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "### ✅ All quality checks passed!" >> $GITHUB_STEP_SUMMARY
        fi
          
    # Upload coverage (optional)
    - name: Upload coverage to Codecov (optional)
      uses: codecov/codecov-action@v5
      if: matrix.python-version == '3.12'  # Only upload once
      continue-on-error: true  # Don't fail if service is down
      with:
        file: ./coverage.xml
        fail_ci_if_error: false